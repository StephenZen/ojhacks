package com.zsp1987.leetcode.uncategory;

import java.util.HashSet;

import com.zsp1987.leetcode.datatype.ListNode;

public class LinkedListCycleII {

    public ListNode detectCycle(ListNode head){
        if(head == null) return null;
        ListNode fast = head, slow = head;
        do{
            if(fast.next == null || fast.next.next == null) return null;
            fast = fast.next.next;
            slow = slow.next;
        }while( fast != slow);

        while( head != slow){
            head = head.next;
            slow = slow.next;
        }
        return head;
    }

	public ListNode detectCycleOld(ListNode head) {
		if (head == null)
			return null;
		ListNode fast = head;
		ListNode slow = head;
		HashSet<ListNode> set = new HashSet<ListNode>();
		set.add(head);
		while (fast.next != null && fast.next.next != null) {
			if (!set.add(slow.next))
				return slow.next;
			else {
				slow = slow.next;
				fast = fast.next.next;
			}
		}
		return null;
	}
}

// å‰?éƒ¨åˆ†è·Ÿcycle1æ˜¯ä¸€æ ·çš„, ç›´åˆ°è¿½å‡»æˆ?åŠŸ,å› ä¸ºå½“å¿«æ…¢ç›¸é?‡æ—¶ å¿«çš„åˆšå¥½æ¯”æ…¢çš„å¤šç»•äº†çŽ¯nåœˆ,
// å?‡è®¾çŽ¯å‰?è·¯ç¨‹ä¸ºx, çŽ¯çš„é•¿åº¦æ˜¯y, ç›¸é?‡ç‚¹è¶…è¿‡èµ·ç‚¹z åˆ™2(x+z) = x+z+ny  => x = ny-z
// æ‰€ä»¥å¤´ä»Žèµ·ç‚¹èµ° åˆšå¥½å’Œæ…¢çš„åœ¨çŽ¯çš„å¼€å¤´ç›¸é?‡
// è€?æ€?è·¯: slow ç¬¬ä¸€æ¬¡åŠ ä¸?è¿›åŽ» å°±æ˜¯cycleçš„èµ·ç‚¹