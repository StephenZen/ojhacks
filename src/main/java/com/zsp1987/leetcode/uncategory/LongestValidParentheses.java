package com.zsp1987.leetcode.uncategory;

/*
 * Given a string containing just the characters '(' and ')', find the length of
 * the longest valid (well-formed) parentheses substring.
 * 
 * For "(()", the longest valid parentheses substring is "()", which has length
 * = 2.
 * 
 * Another example is ")()())", where the longest valid parentheses substring is
 * "()()", which has length = 4.
 */

import java.util.Stack;

public class LongestValidParentheses {

	public int longestValidParentheses(String s) {
		if (s == null) {
            return 0;
        }

        Stack<Integer> stack = new Stack<Integer>();
        int maxLen = 0;			//è®°å½•æ€»é•¿åº¦
        int accumulatedLen = 0;	//è®°å½•å¦‚æžœæ²¡æœ‰å?•ç‹¬å?³æ‹¬å?·ä¸­æ–­çš„å±€éƒ¨è¿žç»­é•¿åº¦

        for(int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                stack.push(i);
            } else {
                if (stack.isEmpty()) {
                    accumulatedLen = 0;
                } else {
                    int matchedPos = stack.pop();
                    int matchedLen = i - matchedPos + 1;

                    if (stack.isEmpty()) {
                        accumulatedLen += matchedLen;
                        matchedLen = accumulatedLen;
                    } else {
                        matchedLen = i - stack.peek();
                    }

                    maxLen = Math.max(maxLen, matchedLen);
                }
            }
        }

        return maxLen;
	}
}

// ä¸¤ä¸ªå…¨å±€å?˜é‡? ä¸€ä¸ªå…¨å±€æœ€é•¿ ä¸€ä¸ªå±€éƒ¨è¿žç»­
// å·¦æ‹¬å?· åŽ‹å??æ ‡
// å?³æ‹¬å?· å¦‚æžœç›´æŽ¥å·¦æ‹¬å?·æ ˆæ˜¯ç©ºçš„ å°†å±€éƒ¨è¿žç»­æ¸…é›¶
// å¦‚æžœå·¦å?·æ ˆå‡ºæ ˆå?Žå?˜ç©º æ›´æ–°å±€éƒ¨è¿žç»­, å½“å‰?é•¿åº¦ä¸ºå?³æ‹¬å?·åˆ°æ ˆé¡¶å·¦æ‹¬å?·çš„è·?ç¦»
// æ›´æ–°å…¨å±€æœ€å¤§
