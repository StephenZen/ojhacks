package com.zsp1987.leetcode.uncategory;

import java.util.TreeSet;

/*
 * Given an array of integers, find out whether there are two distinct indices i
 * and j in the array such that the difference between nums[i] and nums[j] is at
 * most t and the difference between i and j is at most k.
 */
public class ContainsDuplicateIII {
	public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
		if (nums == null || nums.length == 0 || k <= 0) {
			return false;
		}

		final TreeSet<Integer> values = new TreeSet<Integer>();
		for (int i = 0; i < nums.length; i++) {

			Integer floor = values.floor(nums[i] + t);
			Integer ceil = values.ceiling(nums[i] - t);
			if ((floor != null && floor >= nums[i])
					|| (ceil != null && ceil <= nums[i])) {
				return true;
			}

			values.add(nums[i]);
			if (i >= k) {
				values.remove(nums[i - k]);
			}
		}

		return false;
	}
}

// ç”¨ä¸€ä¸ªtreesetæ?¥ç»´æŠ¤ä¸€ä¸ªæŽ’åº?çš„set
// åˆ°ä¸€ä¸ªä½?ç½® å¦‚æžœå½“å‰?setä¸­æœ‰åœ¨tä¸Šä¸‹èŒƒå›´çš„æ•°å°±æ‰¾åˆ°äº†
// å?¦åˆ™åŠ å…¥å½“å‰?æ•° å¹¶ç§»é™¤æ­¤æ•°å‰?kä½?ç½®çš„é‚£ä¸ªæ•° ä¿?æŒ?setçš„é€‰æ‹©èŒƒå›´
